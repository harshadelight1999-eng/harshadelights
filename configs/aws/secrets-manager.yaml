# AWS Secrets Manager Configuration for Harsha Delights
# External Secrets Operator configuration for Kubernetes integration

apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: harsha-delights-aws-secrets
  namespace: harsha-delights
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        secretRef:
          accessKeyID:
            name: aws-credentials
            key: access-key-id
          secretAccessKey:
            name: aws-credentials
            key: secret-access-key
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: harsha-database-secrets
  namespace: harsha-delights
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: harsha-delights-aws-secrets
    kind: SecretStore
  target:
    name: harsha-database-secrets
    creationPolicy: Owner
  data:
  - secretKey: postgres-user
    remoteRef:
      key: harsha-delights/database
      property: postgres-user
  - secretKey: postgres-password
    remoteRef:
      key: harsha-delights/database
      property: postgres-password
  - secretKey: database-url
    remoteRef:
      key: harsha-delights/database
      property: database-url
  - secretKey: redis-url
    remoteRef:
      key: harsha-delights/database
      property: redis-url
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: harsha-app-secrets
  namespace: harsha-delights
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: harsha-delights-aws-secrets
    kind: SecretStore
  target:
    name: harsha-app-secrets
    creationPolicy: Owner
  data:
  - secretKey: jwt-secret
    remoteRef:
      key: harsha-delights/application
      property: jwt-secret
  - secretKey: jwt-refresh-secret
    remoteRef:
      key: harsha-delights/application
      property: jwt-refresh-secret
  - secretKey: api-key-secret
    remoteRef:
      key: harsha-delights/application
      property: api-key-secret
  - secretKey: encryption-key
    remoteRef:
      key: harsha-delights/application
      property: encryption-key
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: harsha-external-services
  namespace: harsha-delights
spec:
  refreshInterval: 30m
  secretStoreRef:
    name: harsha-delights-aws-secrets
    kind: SecretStore
  target:
    name: harsha-external-services
    creationPolicy: Owner
  data:
  - secretKey: sentry-dsn
    remoteRef:
      key: harsha-delights/monitoring
      property: sentry-dsn
  - secretKey: datadog-api-key
    remoteRef:
      key: harsha-delights/monitoring
      property: datadog-api-key
  - secretKey: stripe-secret-key
    remoteRef:
      key: harsha-delights/payments
      property: stripe-secret-key
  - secretKey: stripe-webhook-secret
    remoteRef:
      key: harsha-delights/payments
      property: stripe-webhook-secret
  - secretKey: smtp-password
    remoteRef:
      key: harsha-delights/email
      property: smtp-password
  - secretKey: cloudflare-api-token
    remoteRef:
      key: harsha-delights/dns
      property: cloudflare-api-token
---
apiVersion: v1
kind: Secret
metadata:
  name: aws-credentials
  namespace: harsha-delights
type: Opaque
stringData:
  access-key-id: "REPLACE_WITH_AWS_ACCESS_KEY_ID"
  secret-access-key: "REPLACE_WITH_AWS_SECRET_ACCESS_KEY"